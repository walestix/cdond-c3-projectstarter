# version: 2.1

# commands:
#   install_awscli:
#     description: Install awscli
#     steps:
#       - run:
#           name: Install aws cli
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install

#   install_nodejs:
#     description: Install Nodejs 
#     steps:
#       - run:
#           name: Install Node.js
#           command: |
#             curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
#             sudo apt install -y nodejs

#   install_ansible:
#     description: Install Ansible
#     steps:
#       - run:
#           name: Install Ansible
#           command: |
#             sudo apt update
#             sudo apt install software-properties-common -y
#             sudo add-apt-repository --yes --update ppa:ansible/ansible
#             sudo apt install ansible -y
#             python3 -m pip install --user ansible
#             python3 -m pip install --upgrade --user ansible


#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here
#       workflow_id:
#         default: "${CIRCLE_WORKFLOW_ID:0:7}"
#         type: string   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
#             aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
#             aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"


#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here  
#       workflow_id:
#         default: "${CIRCLE_WORKFLOW_ID:0:7}"
#         type: string   
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           when: on_fail
#           command: |          
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS=$(curl --insecure "https://kvdb.io/QTkCqEtrbTrAwS7dg5cW3E/migration_<<parameters.workflow_id>>")
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#               cd ~/project/backend
#               npm install
#               npm run migrations:revert
#             fi           
            
# jobs:
#   build-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: Build front-end
#           command: |
#             # Your code here
#             cd frontend
#             npm install
#             npm run build
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-build

#   build-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: Back-end build
#           command: |
#              # Your code here
#              cd backend
#              npm install
#              npm run build
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-build

#   test-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#       # Docker image here
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-test]
#       - run:
#           name: front-end test
#           command: |
#              cd frontend
#              npm install
#              npm run test
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-test    

#   test-backend:
#     docker:
#       - image: circleci/node:13.8.0
#       # Docker image here
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-test]
#       - run:
#           name: back-end test
#           command: |
#              cd backend
#              npm install
#              npm run test
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-test             

            
#   scan-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#       # Docker image here
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-scan]
#       - run:
#           name: front-end scan
#           command: |
#              cd frontend
#              npm install
#              # npm install oauth-sign@^0.9.0
#              npm audit fix --audit-level=critical --force
#              npm audit --audit-level=critical
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-scan             

#   scan-backend:
#     docker:
#       - image: circleci/node:13.8.0
#       # Docker image here
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-scan]
#       - run:
#           name: back-end scan
#           command: |
#              cd backend
#              npm install
#              # npm install oauth-sign@^0.9.0
#              npm audit fix --audit-level=critical --force
#              npm audit fix --audit-level=critical --force
#              npm audit --audit-level=critical
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-scan             

#   deploy-infrastructure:
#     docker:
#       - image: amazon/aws-cli
#       # Docker image here that supports AWS CLI
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             yum install -y tar gzip
#       # Checkout code from git
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
#               --tags project=udapeople

              
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
#               --tags project=udapeople
          
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             # Your code here
#             cd .circleci/ansible
#             cat inventory.txt
#             aws ec2 describe-instances \
#             --query 'Reservations[*].Instances[*].PublicIpAddress' \
#             --output text --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
#             cat inventory.txt
#             #   export BACKEND_IP=$(aws ec2 describe-instances \
#             # --query 'Reservations[*].Instances[*].PublicIpAddress' \
#             # --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
#             # --output text
#             # )
#             # echo $(BACKEND_IP)

#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
#       # Here's where you will add some code to rollback on failure      

#   configure-infrastructure:
#   # docker image
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints:
#             - "2a:cc:4a:00:95:43:26:eb:dd:5f:b4:bc:ab:e9:08:ee"
#       - attach_workspace:
#           at: .circleci/ansible
      
#       # - run:
#       #     name: Install dependencies (openssh)
#       #     command: |
#       #       apt add --update openssh # Install openssh and git
#       #       apt add --update git # Install git
#       # - run: 
#       #     name: Install dependences (Nodejs and NPM) and ansible
#       #     command: |
#       #       wget https://nodejs.org/dist/v13.8.0/node-v13.8.0-linux-x64.tar.xz
#       #       apt add --update npm
#       #       apt add --update ansible # Install ansible
#       # - run:
#       #     name: Install dependencies (awscli, tar and gzip)
#       #     command: |
#       #       apt --no-cache add py-pip
#       #       pip install awscli
#       #       apt add --update tar gzip

#       - run:
#           name: Install Ansible
#           command: |
#             sudo apt update
#             sudo apt install software-properties-common -y
#             sudo add-apt-repository --yes --update ppa:ansible/ansible
#             sudo apt install ansible -y
#       # - run:
#       #     name: Run your playbook to configure server
#       #     command: |
#       #       cd .circleci/ansible
#       #       cat inventory.txt
#       #       ansible-playbook -i inventory.txt configure-server.yml
      

      
#       - run:
#           name: Configure server
#           command: |
#             cd .circleci/ansible
#             cat inventory.txt

#             ansible-playbook -i inventory.txt configure-server.yml
#       - destroy-environment
    

#   run-migrations:
#     docker:
#       - image: circleci/node:13.8.0
#       # Docker image here that supports NodeJS
#     steps:
#       - checkout
#       # - restore_cache:
#       #     keys: [backend-build]
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             cd backend
#             npm install
#             npm run migrations > migrations_dump.txt
#       - run:
#           name: Send migration results to kvdb
#           command: |
#             if grep -q "has been exexuted successfully." ~/project/backend/migrations_dump.txt
#              then
#               curl --insecure https://kvdb.io/QTkCqEtrbTrAwS7dg5cW3E/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
#             fi 
#       - destroy-environment
#       - revert-migrations

      

#   deploy-frontend:
#     docker:
#       - image: cimg/base:stable      
#       # Docker image here that supports AWS CLI
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints:
#             - "2a:cc:4a:00:95:43:26:eb:dd:5f:b4:bc:ab:e9:08:ee"
#       - attach_workspace:
#           at: .circleci/ansible

#       - install_nodejs
#       - install_awscli
#       - install_ansible
        
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export BACKEND_IP=$(aws ec2 describe-instances \
#             --query 'Reservations[*].Instances[*].PublicIpAddress' \
#             --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
#             --output text
#             )
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
#             cat frontend/.env
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#             # cd frontend
#             # sudo npm install -g npm@lastest
#             # rm -rf node_modules
#             # npm install
#             # npm run build
#             # aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
#             cd frontend
#             npm install
#             npm run build
#             tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
#             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
#       - destroy-environment
#       - revert-migrations

#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       - image: cimg/base:stable      
#       # Docker image here that supports AWS CLI
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints:
#             - "2a:cc:4a:00:95:43:26:eb:dd:5f:b4:bc:ab:e9:08:ee"
#       - attach_workspace:
#           at: .circleci/ansible

#       - install_nodejs
#       - install_awscli
#       - install_ansible
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#             cd backend
#             npm i
#             npm run build
#             cd ..

#             cd .circleci/ansible
#             mkdir files
#             cd files
#             tar -C ../../../backend -czvf artifact.tar.gz .
#             cd ../

#             echo "Contents  of the inventory.txt file is -------"
#             cat inventory.txt
#             ansible-playbook -i inventory.txt deploy-backend.yml
#       # Here's where you will add some code to rollback on failure  
#       - destroy-environment
#       - revert-migrations      

#   smoke-test:
#     docker:
#       - image:  cimg/base:stable      
#       # Docker image here that supports AWS CLI
#     steps:
#       - checkout
#       - install_awscli

#       - run:
#           name: Backend smoke test.
#           command: |
#             BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
#               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --output text)
#             export API_URL=http://${BACKEND_PUBLIC_IP}:3030
#             echo ${BACKEND_PUBLIC_IP}
#             echo backend-${CIRCLE_WORKFLOW_ID:0:7}
#             echo ${API_URL}
#             if curl -s $API_URL/api/status | grep "ok"
#             then
#               exit 1
#             else
#               exit 1
#             fi 

#       - run:
#           name: Frontend smoke test.
#           command: |
          
            
#             FRONT_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com            
#             echo $URL 
#             if curl -s $FRONT_WEBSITE | grep "Welcome"
#             then
#             # Change this to 0 after the job fails
#               exit 1
#             else
#               exit 1
#             fi 
 
#        # Here's where you will add some code to rollback on failure  
#       # - destroy-environment
#       # - revert-migrations      


#   cloudfront-update:
#     docker:
#       - image: amazon/aws-cli
#       # Docker image here that supports AWS CLI
#     steps:
#       - checkout
      
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#             export OldWorkflowID=$(aws cloudformation \
#             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#             --no-paginate --output text)
#             echo OldWorkflowID: "${OldWorkflowID}"
#             echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
#             curl https://kvdb.io/QTkCqEtrbTrAwS7dg5cW3E/old_workflow_id -d "${OLD_WORKFLOW_ID}"
#             # Fetch the stack names          
#             # export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
#             # --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
#             # echo Stack names: "${STACKS[@]}"          
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#             aws cloudformation deploy \
#               --template-file .circleci/files/cloudfront.yml \
#               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"  \
#               --stack-name InitialStack 
#       - destroy-environment
#       - revert-migrations  

#       # Here's where you will add some code to rollback on failure  

#   cleanup:
#     docker:
#       - image: cimg/base:stable
#       # Docker image here that supports AWS CLI
#     steps:
#       - checkout
#       - install_awscli
      
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export STACKS=($(aws cloudformation list-stacks \
#                 --query "StackSummaries[*].StackName" \
#                 --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
#             echo Stack names: "${STACKS[@]}"  
#             export OldWorkflowID=$(curl --insecure https://kvdb.io/QTkCqEtrbTrAwS7dg5cW3E/old_workflow_id)
#             echo Old Workflow ID: $OldworkflowID
#       - run:
#           name: Remove old stacks and files
#           command: |
#             export OldWorkflowID=$(curl --insecure https://kvdb.io/QTkCqEtrbTrAwS7dg5cW3E/old_workflow_id)
#             echo Old Workflow ID: $OldWorkflowID
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#                 aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#                 aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#                 aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
#             fi       



# workflows:
#   default:
#     jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]
#       - scan-backend:
#           requires: [build-backend]
#       - scan-frontend:
#           requires: [build-frontend]
#       - deploy-infrastructure:
#           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#             branches:
#               only: [master] 
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#       - run-migrations:
#           requires: [configure-infrastructure]
#       - deploy-frontend:
#           requires: [run-migrations]
#       - deploy-backend:
#           requires: [run-migrations]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]

version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" \
            --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
            cd backend
            npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            npm i
            npm run build
            pwd && ls -al
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
            npm i
            npm run build
            cp .env dist/.env
            pwd && ls -al
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist
            - project/backend/node_modules
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test-frontend
          working_directory: ./frontend
          command: |
            npm i
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test-backend
          working_directory: ./backend
          command: |
            npm i
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          working_directory: ./frontend
          command: |
            npm i
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          working_directory: ./backend
          command: |
            npm i
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: save the new back-end url to memory using memstach
          command: |
            backend_url=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            curl -H "Content-Type: text/plain" \
            -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" \
            --request PUT \
            --data "http://${backend_url}:3030" \
            https://api.memstash.io/values/backend_url
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
        environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["45:44:e9:b4:35:84:f7:3f:e3:f9:5f:e5:a0:95:2a:b1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm i
            npm run build
            npm run migrations
      - run:
          name: Send migration results to memstash
          command: |
            echo "has been done successfully" > ./migration_status.txt
            pwd && ls -al
            if grep -q "has been done successfully" ./migration_status.txt 
            then 
              echo "has been done successfully"
              curl -H "Content-Type: text/plain" -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" --request PUT --data "1" https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "has failed"
              curl -H "Content-Type: text/plain" -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" --request PUT --data "0" https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: Get backend url
          command: |
            API_URL=$(curl -H "Content-Type: text/plain" \
            -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" \
            --request GET \
            https://api.memstash.io/values/backend_url)
            echo $API_URL
            echo "${API_URL}"
            echo "NODE_ENV=production" >> frontend/.env
            echo "API_URL=${API_URL}" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm i
            npm run build
            ls -l
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
        environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["eb:8c:c3:a9:4b:36:3f:c7:69:df:e2:36:d3:22:f5:ed"]
      - attach_workspace:
          at: /root
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible rsync 
            apk add curl
            pip3 install awscli
      - run:
          name: Deploy backend
          command: |
            ls /root
            ls /root/project/backend/
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            ls 
            pwd
            export backend_url=$(curl -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" \
            --request GET https://api.memstash.io/values/backend_url)
            echo $backend_url
            # curl "$backend_url/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: get old workflow for clean
          command: |
            WorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" --request PUT --data "$WorkflowID" https://api.memstash.io/values/workflowid
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=circleci-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-cloudfrontstack" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(curl -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" --request GET https://api.memstash.io/values/workflowid)
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            if [[ $OldWorkflowID == "" ]]
            then
            echo "No workflow id found"
            else
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            fi
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires:
            - run-migrations
      - deploy-frontend:
          requires:
            - run-migrations
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
