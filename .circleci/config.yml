version: 2.1

commands:
  install_awscli:
    description: Install awscli
    steps:
      - run:
          name: Install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
    description: Install Nodejs 
    steps:
      - run:
          name: Install Node.js
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
            python3 -m pip install --user ansible
            python3 -m pip install --upgrade --user ansible


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here  
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |          
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/QTkCqEtrbTrAwS7dg5cW3E/migration_<<parameters.workflow_id>>")
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi           
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
             cd frontend
             npm install
             npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test    

  test-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: back-end test
          command: |
             cd backend
             npm install
             npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test             

            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: front-end scan
          command: |
             cd frontend
             npm install
             # npm install oauth-sign@^0.9.0
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan             

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: back-end scan
          command: |
             cd backend
             npm install
             # npm install oauth-sign@^0.9.0
             npm audit fix --audit-level=critical --force
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan             

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople

              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
          
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            cd .circleci/ansible
            cat inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
            cat inventory.txt
            #   export BACKEND_IP=$(aws ec2 describe-instances \
            # --query 'Reservations[*].Instances[*].PublicIpAddress' \
            # --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            # --output text
            # )
            # echo $(BACKEND_IP)

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
  # docker image
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "2a:cc:4a:00:95:43:26:eb:dd:5f:b4:bc:ab:e9:08:ee"



    

      - attach_workspace:
          at: ~/
      
      - install_awscli
      - install_ansible

      
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt

            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
    

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - install_awscli
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been exexuted successfully." ~/project/backend/migrations_dump.txt
             then
              curl --insecure https://kvdb.io/QTkCqEtrbTrAwS7dg5cW3E/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi 
      - destroy-environment
      - revert-migrations

      

  deploy-frontend:
    docker:
      - image: cimg/base:stable      
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "2a:cc:4a:00:95:43:26:eb:dd:5f:b4:bc:ab:e9:08:ee"
      - attach_workspace:
          at: ~/

      - install_nodejs
      - install_awscli
      - install_ansible
        
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            # cd frontend
            # sudo npm install -g npm@lastest
            # rm -rf node_modules
            # npm install
            # npm run build
            # aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable      
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "2a:cc:4a:00:95:43:26:eb:dd:5f:b4:bc:ab:e9:08:ee"
      - attach_workspace:
          at: ~/

      - install_nodejs
      - install_awscli
      - install_ansible
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..

            cd .circleci/ansible
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../

            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations      

  smoke-test:
    docker:
      - image:  cimg/base:stable      
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - install_awscli

      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            echo ${BACKEND_PUBLIC_IP}
            echo backend-${CIRCLE_WORKFLOW_ID:0:7}
            echo ${API_URL}
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 1
            else
              exit 1
            fi 

      - run:
          name: Frontend smoke test.
          command: |
          
            
            FRONT_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com            
            echo $URL 
            if curl -s $FRONT_WEBSITE | grep "Welcome"
            then
            # Change this to 0 after the job fails
              exit 1
            else
              exit 1
            fi 
 
       # Here's where you will add some code to rollback on failure  
      # - destroy-environment
      # - revert-migrations      


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      
      - run:
          name: Install dependencies
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            curl https://kvdb.io/QTkCqEtrbTrAwS7dg5cW3E/old_workflow_id -d "${OLD_WORKFLOW_ID}"
            # Fetch the stack names          
            # export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            # --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            # echo Stack names: "${STACKS[@]}"          
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --stack-name InitialStack 
      - destroy-environment
      - revert-migrations  

      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: cimg/base:stable
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      - install_awscli
      
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"  
            export OldWorkflowID=$(curl --insecure https://kvdb.io/QTkCqEtrbTrAwS7dg5cW3E/old_workflow_id)
            echo Old Workflow ID: $OldworkflowID
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl --insecure https://kvdb.io/QTkCqEtrbTrAwS7dg5cW3E/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi       



workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master] 
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
